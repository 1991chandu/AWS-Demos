AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Network Stack
Metadata: {}

Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/24
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privAvailabilityZone:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  privSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.128/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  InstanceName:
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: region-virginia-training-demo-key
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Mappings: 
  RegionMap: 
    us-east-1: 
      "64": "ami-b63769a1"
    ap-south-1: 
      "64": "ami-cdbdd7a2"

Resources:

  myDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myDemoVPC

  rtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
      VpcId:
        Ref: myDemoVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: rtb

  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: pubAvailabilityZone}
      CidrBlock: {Ref: pubSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZone}]
      VpcId: {Ref: myDemoVPC}

  privSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: privAvailabilityZone}
      CidrBlock: {Ref: privSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: privAvailabilityZone}]
      VpcId: {Ref: myDemoVPC}

  pubSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: pubSubnet

  privSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: privSubnet


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH & HTTPD access via port 22 & 80 respectively
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: {Ref: myDemoVPC}

  webServer:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 64]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref pubSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            yum -y install httpd
            systemctl start httpd
            echo "<h1> Welcome to Valaxy Cloudformation Demo</h1>" >> /var/www/html/index.html


Outputs:
  TemplateID:
    Description: 'Valaxy Cloudformation demo template'
    Value: 'vpc/EC2'
  
  ImageId:
    Description: 'The value of AMI'
    Value: !FindInMap [RegionMap, !Ref "AWS::Region", 64]

  IPAddress:
    Description: 'The public IP address of the EC2 Instance.'
    Value: !GetAtt webServer.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-Public-DNS-Address'
