AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud Formation Demo - Network Stack - VPC
Metadata: {
    "Version": "v1.0",
    "Comments": "Generated by Miztiik",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["CidrBlock", "pubAvailabilityZone", "pubSubnetCIDR", "privAvailabilityZone", "privSubnetCIDR"]
      }
      ]
    }
  }

Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/24
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  privAvailabilityZone:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.128/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String


Resources:

  myDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myDemoVPC

  rtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
      VpcId:
        Ref: myDemoVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: rtb

  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: pubAvailabilityZone}
      CidrBlock: {Ref: pubSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZone}]
      VpcId: {Ref: myDemoVPC}

  privSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: privAvailabilityZone}
      CidrBlock: {Ref: privSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: privAvailabilityZone}]
      VpcId: {Ref: myDemoVPC}

  pubSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: pubSubnet

  privSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: privSubnet


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH & HTTPD access via port 22 & 80 respectively
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref myDemoVPC

Outputs:
  TemplateID:
    Description: 'Valaxy Cloudformation demo template'
    Value: 'vpc/EC2'

  VpcID:
    Description: 'The PVC ID of the Network Stack'
    Value: !Ref myDemoVPC

  SubnetId:
    Description: 'The Public Subnet ID'
    Value: !Ref pubSubnet

  SecurityGroupIds:
    Description: 'The public secutiry group ID'
    Value: !Ref InstanceSecurityGroup